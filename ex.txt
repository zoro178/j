class Node{
    int data;
    Node next;

    Node(int data){
        this.data = data;
        this.next = null;
    }
    public int getData(){
        return data;
    }
}

class LinkList{
    Node head;

    LinkList(){
        this.head = null;
    }

    public boolean isEmpty(){
        return head == null;
    }

    public void insertFirst(int value){
        Node node = new Node(value);
        if(!isEmpty()){
            node.next = head;
            head = node;
            return;
        }
        node.next = null;
        head = node;
    }

    public void insertLast(int value){
        if(isEmpty()){
            insertFirst(value);
            return;
        }
        Node temp = head;
        for(int i = 1 ; i < getSize() ; i++ ){
            temp = temp.next;
        }
        Node node = new Node(value);
        node.next = null;
        temp.next = node;
        
    }

    public void insert(int index,int value){
        if(index < 1 || index > getSize()){
            return;
        }
        if(isEmpty()|| index == 1){
            insertFirst(value);
            return;
        }
        // if(index == getSize()){
        //     insertLast(value);
        //     return;
        // }
        Node temp = head;
        for(int i = 1 ; i < index - 1 ; i++){
            temp = temp.next;
        }

        Node node = new Node(value);
        node.next = temp.next;
        temp.next = node;

    }

    public int getSize(){
        Node temp = head;
        int size = 0;
        while(!(temp==null)){
            temp = temp.next;
            size++;
        }
        return size;
    }

    public void deleteFirst(){
        head = head.next;
    }

    public void deleteLast(){
        Node temp = head;
        while (!(temp.next.next == null)) {
            temp = temp.next;
        }
        temp.next = null;
    }

    public void delete(int index){
        if(index < 1 || index > getSize()){
            return;
        }
        if(index == 1){
            deleteFirst();
            return;
        }
        if(index == getSize()){
            deleteLast();
            return;
        }
        Node temp = head;
        for(int i = 1 ; i < index-1 ; i++){
            temp = temp.next;
        }
        temp.next = temp.next.next;
    }

    public int search(int value){
        Node node = head;
        int count = 1;
        while (!(node.data == value)) {
            node = node.next;
            count++;
        }

        return count;
    }

    public void removeDuplicate(){
        if(isEmpty()){
            return;
        }
        Node current = head;
        while (current != null) {
            Node temp = current;
            while (temp.next != null) {
                if(current.data == temp.next.data){
                    delete(search(temp.next.data));
                }
                temp = temp.next;
            }
            current = current.next;
        }
    }

    public void reverse() {
        Node prev = null;
        Node current = head;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        head = prev;
    }

    public void display(){
        Node temp = head;
        while (!(temp == null)) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();

    }
}

////////////////////////////////////////////////

class Node {

    Node next;
    Node prev;
    int data;

    Node(int data){
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}
class LinkedList {

    Node head;

    LinkedList(){
        this.head = null;
    }

    public boolean isEmpty(){
        return head == null;
    }

    public int getSize(){
        Node temp = head;
        int count = 0;
        while (temp != null) {
            temp = temp.next;
            count++;
        }
        return count;
    }

    public void insertFirst(int value){
        Node node = new Node(value);
        
        if(head != null){
            node.next = head;
            head.prev = node;
            head = node;
            return;
        }
        head = node;
    }

    public void insertLast(int value){
        if(isEmpty()){
            insertFirst(value);
            return;
        }
        Node node = new Node(value);
        Node temp = head;

        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = node;
        node.prev = temp;
        
        
    }

    public void insert(int index, int value){
        if(isEmpty() || index == 1){
            insertFirst(value);
            return;
        }
        
        // if(index == getSize()){
        //     insertLast(value);
        //     return;
        // }
        Node temp = head;
        for(int i = 1 ; i < index-1 ; i++){
            temp = temp.next;
        }
        Node node = new Node(value);
        node.next = temp.next;
        temp.next = node;
        node.prev = temp;
        
    }

    public void deleteFirst(){
        if(isEmpty()){
            return;
        }
        head = head.next;
        
    }

    public void deleteLast(){
        if(isEmpty()){
            return;
        }
        Node temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        // temp.next.prev = null;
        temp.next = null;
         
    }

    public void delete(int index){
        if(isEmpty()){
            return;
        }
        if(index == 1){
            deleteFirst();
            return;
        }
        if(index == getSize()){
            deleteLast();
            return;
        }

        Node temp = head;
        for(int i = 1 ; i < index -1 ; i++){
            temp = temp.next;
        }
        temp.next = temp.next.next;
        temp.next.prev = temp;
    }

    public int search(int value){
        Node temp = head;
        int count = 1;
        while(temp.data != value){
            temp = temp.next;
            count++;
        }
        return count;

    }

    public void reverse(){
        Node back = head;
        while (back.next != null) {
            back = back.next;
        }

        Node front = head;

        for(int i = 0; i < getSize()/2 ; i++){
            int temp = front.data;
            front.data = back.data;
            back.data = temp;

            front = front.next;
            back = back.prev;
        }
    }

    public void display(){
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
    
}

///////////////////////////////////////////////

class Node {
    Node left;
    Node right;
    int data;

    Node(int date){
        this.data = date;
    }
    
}
class BST{

    Node root;

    BST(){
        this.root = null;
    }

    // public boolean isEmpty(){
    //     return root == null;
    // }

    public void insert(int value){
        root = insertRec(root,value);
    }

    public Node insertRec(Node root,int value){
        
        if(root == null){
            root = new Node(value);
        }else{
            if(value <= root.data){
                root.left = insertRec(root.left, value);
            }else{
                root.right = insertRec(root.right, value);
            }
        }
        return root;
    }

    public int height(Node root){
        if(root == null){
            return -1;
        }
        
        return 1 + Math.max(height(root.right) , height(root.left));
    }

    public int minValue(Node root){
        if(root == null){
            return -1;
        }
        
        while (root.left != null) {
            root = root.left;
        }
        return root.data;
    }

    public void delete(int value){
        root = deleteRec(root,value);
    }

    public Node deleteRec(Node root,int value){
        if(root == null){
            return null;
        }
        if(value < root.data){
            root.left = deleteRec(root.left, value);
        }else if(value > root.data){
            root.right = deleteRec(root.right, value);
        }else{
            if(root.left == null){
                return root.right;
            }else if(root.right == null){
                return root.left;
            }

            root.data = minValue(root.right);
            root.right = deleteRec(root.right, root.data);
        }
        return root;
    }

    public boolean search(int value){
        return searchRec(root,value);
    }

    public boolean searchRec(Node root,int value){
        if(root == null || root.data == value){
            return root != null;
        }
        if(value < root.data){
             return searchRec(root.left, value);
        }
        return searchRec(root.right, value);

    }

    public void inOrder(){
        inOrderRec(root);
    }

    public void inOrderRec(Node root){
        if(root == null){
            return;
        }
        inOrderRec(root.left);
        System.out.print(root.data + " ");
        inOrderRec(root.right);
    }

    public void preOrder(){
        preOrderRec(root);
    }

    public void preOrderRec(Node root){
        if(root == null){
            return;
        }
        System.out.print(root.data + " ");
        preOrderRec(root.left);
        preOrderRec(root.right);
    }

    public void postOrder(){
        postOrderRec(root);
    }

    public void postOrderRec(Node root){
        if(root == null){
            return;
        }
        postOrderRec(root.left);
        postOrderRec(root.right);
        System.out.print(root.data + " ");
    }


}

////////////////////////////////////////////////////////////////////////

class tree {

    int[] array;
    
    tree(){
        array = new int[128];
    }

    public int left(int i){
        return 2*i;
    }

    public int right(int i){
        return 2*i + 1;
    }

    public int parent(int i){
        return i/2;
    }

    public boolean isEmpty(){
        return array[1] == 0;
    }

    public int get(int index){
        if(index < 0 || index >= array.length){
            return 0;
        }
        return array[index];
    }

    public void set(int index,int value){
        if(index < 0 || index >= array.length){
            return;
        }
        array[index] = value;
    }

    public int height(int i){
        if(get(i) == 0){
            return -1;
        }
        return 1 + Math.max(height(left(i)),height(right(i))); 
    }

    public int size(int i) {
        if (get(i) == 0) return 0;
        return 1 + size(left(i)) + size(right(i));
    }

    public int find(int i ,int value){
        if(get(i) == 0){
            return -1;
        }
        if(get(i) == value){
            return i ;
        }
        int leftValue = find(left(i), value);
        if(leftValue != -1){
            return leftValue;
        }

        // int leftResult = find(i,value);
        // if(leftResult != -1){
        //     return leftResult;
        // }
        return find(right(i), value);
    }

    public void preOrder(int i){
        if(get(i) == 0) return;
        
        System.out.print(get(i) + " ");
        preOrder(left(i));
        parent(right(i));
    }

    public void inOrder(int i){
        if(get(i) == 0) return;
        inOrder(left(i));
        System.out.print(get(i) + " ");
        inOrder(right(i));
    }

    public void postOrder(int i){
        if(get(i) == 0) return;
        postOrder(left(i));
        postOrder(right(i));
        System.out.print(get(i) + " ");
    }

}

///////////////////////////////////////

class Node {
    String data;
    Node next;

    public Node(String data) {
        this.data = data;
        this.next = null;
    }
}

class StackADT {
    Node top;

    public StackADT() {
        this.top = null;
    }

    public boolean isEmpty() {
        return top == null;
    }

    public void push(String data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            top = newNode;
        } else {
            newNode.next = top;
            top = newNode;
        }
    }

    public String pop() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return null;
        } else {
            String data = top.data;
            top = top.next;
            return data;
        }
    }

    public String peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
            return null;
        } else {
            return top.data;
        }
    }

    public void display() {
        if (isEmpty()) {
            System.out.println("Stack is empty");
        } else {
            Node current = top;
            while (current != null) {
                System.out.print(current.data + " ");
                current = current.next;
            }
            System.out.println();
        }
    }
}

public class BalancedExpressionChecker {
    public static boolean isBalanced(String expression) {
        StackADT stack = new StackADT();

        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(Character.toString(ch));
            } else if (ch == ')' || ch == ']' || ch == '}') {
                if (stack.isEmpty()) {
                    return false; // Unmatched closing symbol
                }

                String topSymbol = stack.pop();
                if ((ch == ')' && !topSymbol.equals("(")) ||
                    (ch == ']' && !topSymbol.equals("[")) ||
                    (ch == '}' && !topSymbol.equals("{"))) {
                    return false; // Mismatched closing symbol
                }
            }
        }

        return stack.isEmpty(); // Check if the stack is empty at the end
    }

    public static void main(String[] args) {
        String expression1 = "{(a + b) * [c - d]}";
        String expression2 = "{(a + b) * [c - d]";
        String expression3 = "{(a + b) * [c - d]})";

        System.out.println(expression1 + " is balanced: " + isBalanced(expression1)); // Output: true
        System.out.println(expression2 + " is balanced: " + isBalanced(expression2)); // Output: false
        System.out.println(expression3 + " is balanced: " + isBalanced(expression3)); // Output: false
    }
}

